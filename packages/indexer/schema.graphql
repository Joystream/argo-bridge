# noinspection GraphQLUnresolvedReference,GraphQLMissingType
interface Event {
  id: ID! # chainId-blockNumber-indexInBlock
  chainId: BigInt!
  txHash: String!
  block: Int!
  timestamp: DateTime!
}

enum BridgeTransferStatus {
  REQUESTED
  MAYBE_COMPLETED
  COMPLETED
}

type BridgeTransfer @entity {
  id: ID! # sourceChainId-sourceTransferId
  amount: BigInt!
  status: BridgeTransferStatus! @index
  feePaid: BigInt! # fee paid in source chain token
  sourceChainId: BigInt! @index
  sourceTransferId: BigInt! @index
  sourceAccount: String! @index

  destChainId: BigInt! @index
  destAccount: String! @index

  createdAtBlock: Int!
  createdAtTimestamp: DateTime!
  createdTxHash: String!

  completedAtBlock: Int
  completedAtTimestamp: DateTime
  completedTxHash: String
}

### EVM BRIDGE ###

enum EvmBridgeStatus {
  ACTIVE
  PAUSED
}

type EvmBridgeMintingLimits {
  periodLength: Int!
  periodLimit: BigInt!
  currentPeriodMinted: BigInt!
  currentPeriodEndBlock: Int!
}

type EvmBridgeConfig @entity {
  id: ID!
  status: EvmBridgeStatus!
  bridgingFee: BigInt!
  adminAccounts: [String!]!
  operatorAccounts: [String!]!
  pauserAccounts: [String!]!
  mintingLimits: EvmBridgeMintingLimits!
  totalMinted: BigInt!
  totalBurned: BigInt!
}

type EvmBridgeTransferToJoystreamRequestedEvent implements Event @entity {
  id: ID!
  chainId: BigInt! @index
  txHash: String!
  block: Int!
  timestamp: DateTime!
  amount: BigInt!
  ethRequester: String!
  ethTransferId: BigInt!
  joyDestAccount: String!
}

type EvmBridgeTransferToEthCompletedEvent implements Event @entity {
  id: ID!
  chainId: BigInt! @index
  txHash: String!
  block: Int!
  timestamp: DateTime!
  joyTransferId: BigInt!
  ethDestAddress: String!
  amount: BigInt!
}

type EvmBridgeFeeChangedEvent implements Event @entity {
  id: ID!
  chainId: BigInt! @index
  txHash: String!
  block: Int!
  timestamp: DateTime!
  fee: BigInt!
}

type EvmBridgeFeesWithdrawnEvent implements Event @entity {
  id: ID!
  chainId: BigInt! @index
  txHash: String!
  block: Int!
  timestamp: DateTime!
  amount: BigInt!
  destination: String!
}

type EvmBridgeStatusChangedEvent implements Event @entity {
  id: ID!
  chainId: BigInt! @index
  txHash: String!
  block: Int!
  timestamp: DateTime!
  status: EvmBridgeStatus!
}

type EvmBridgeMintingLimitsUpdatedEvent implements Event @entity {
  id: ID!
  chainId: BigInt! @index
  txHash: String!
  block: Int!
  timestamp: DateTime!
  periodLength: Int!
  periodLimit: BigInt!
}

type EvmBridgeRoleGrantedEvent implements Event @entity {
  id: ID!
  chainId: BigInt! @index
  txHash: String!
  block: Int!
  timestamp: DateTime!
  role: String!
  account: String!
}

type EvmBridgeRoleRevokedEvent implements Event @entity {
  id: ID!
  chainId: BigInt! @index
  txHash: String!
  block: Int!
  timestamp: DateTime!
  role: String!
  account: String!
}

### TIMELOCK ###

enum EvmTimelockCallStatus {
  PENDING
  EXECUTED
  CANCELLED
}

type EvmTimelockCall @entity {
  id: ID! # chainId-callId
  chainId: BigInt! @index
  callId: String! @index

  status: EvmTimelockCallStatus!
  createdAtBlock: Int!
  createdAtTimestamp: DateTime!
  createdTxHash: String!

  executedAtBlock: Int
  executedAtTimestamp: DateTime
  executedTxHash: String
  cancelledAtBlock: Int
  cancelledAtTimestamp: DateTime
  cancelledTxHash: String

  callTarget: String!
  callValue: BigInt!
  callData: String!
  callSignature: String
  callArgs: String

  predecessor: String
  salt: String

  delayDoneTimestamp: DateTime!
}

#type EvmTimelockCallScheduledEvent implements Event @entity {
#  id: ID!
#  chainId: BigInt! @index
#  txHash: String!
#  block: Int!
#  timestamp: DateTime!
#  callId: ID!
#}

### JOYSTREAM ARGO PALLET ###

type JoyBridgeConfigUpdatedEvent implements Event @entity {
  id: ID!
  chainId: BigInt!
  txHash: String!
  block: Int!
  timestamp: DateTime!
  # TODO: add fields
}

type JoyBridgeThawnStartedEvent implements Event @entity {
  id: ID!
  chainId: BigInt!
  txHash: String!
  block: Int!
  timestamp: DateTime!
  account: String!
}

type JoyBridgeThawnFinishedEvent implements Event @entity {
  id: ID!
  chainId: BigInt!
  txHash: String!
  block: Int!
  timestamp: DateTime!
}

type JoyBridgePausedEvent implements Event @entity {
  id: ID!
  chainId: BigInt!
  txHash: String!
  block: Int!
  timestamp: DateTime!
  account: String!
}

type JoyBridgeOutboundTransferRequestedEvent implements Event @entity {
  id: ID!
  chainId: BigInt!
  txHash: String!
  block: Int!
  timestamp: DateTime!
  joyRequester: String!
  joyTransferId: BigInt!
  destAccount: String!
  destChainId: BigInt!
  amount: BigInt!
  feePaid: BigInt!
}

type JoyBridgeInboundTransferFinalizedEvent implements Event @entity {
  id: ID!
  chainId: BigInt!
  txHash: String!
  block: Int!
  timestamp: DateTime!
  remoteTransferId: BigInt!
  remoteChainId: BigInt!
  joyDestAccount: String!
  amount: BigInt!
}

enum JoyBridgeStatus {
  ACTIVE
  PAUSED
  THAWN
}

type JoyBridgeConfig @entity {
  id: ID!
  status: JoyBridgeStatus!
  thawnStartedAtBlock: Int
  bridgingFee: BigInt!
  thawnDurationBlocks: Int!
  mintAllowance: BigInt!
  operatorAccount: String!
  pauserAccounts: [String!]!
  totalMinted: BigInt!
  totalBurned: BigInt!
  feesBurned: BigInt!
}
